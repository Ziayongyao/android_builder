name: build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Get project name
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT
      - name: Clone project
        run: git clone --depth=1 ${{ steps.get-project.outputs.project }} project
      - name: Setup Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build the app
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace
      - name: Move APK to temporary directory
        run: |
          temp_dir=$(mktemp -d)
          find project -type f -name "*.apk" -exec mv {} "$temp_dir" \;
          # 获取两个APK路径并导出为环境变量
          readarray -t apks < <(ls "$temp_dir"/*.apk | head -n 2)
          echo "APK1_PATH=${apks[0]}" >> $GITHUB_ENV
          echo "APK2_PATH=${apks[1]}" >> $GITHUB_ENV

      - name: Upload First APK
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK1_PATH }}
          # 显式验证文件存在性
          if: ${{ env.APK1_PATH != null && env.APK1_PATH != '' }}

      - name: Upload Second APK
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK2_PATH }}
          if: ${{ env.APK2_PATH != null && env.APK2_PATH != '' }}
