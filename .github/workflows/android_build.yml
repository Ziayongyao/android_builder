name: android_build

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时执行一次
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Create project-to-build file
        run: |
          echo "https://github.com/Fansirsqi/Sesame-TK" > project-to-build

      - name: Get project name
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT

      - name: Restore previous hash from cache
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: |
            ${{ steps.get-project.outputs.project }}-hash
        continue-on-error: true  # 新增：允许缓存未命中时继续执行

      - name: Get remote HEAD hash
        id: get-remote-hash
        run: |
          REMOTE_HASH=$(git ls-remote ${{ steps.get-project.outputs.project }} HEAD | awk '{print $1}')
          PREVIOUS_HASH=""
          if [ -f previous_hash.txt ]; then
            PREVIOUS_HASH=$(cat previous_hash.txt)
          fi

          if [ "$REMOTE_HASH" = "$PREVIOUS_HASH" ]; then
            echo "No new commits since last check. Skipping workflow."
            echo "SKIP_BUILD=1" >> $GITHUB_ENV  # 新增：设置跳过标记
          else
            echo "New commit detected. Proceeding with build."
            echo "$REMOTE_HASH" > previous_hash.txt
          fi

      - name: Create and push tag for release
        #if: ${{ !env.SKIP_BUILD }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a ${{ steps.get-remote-hash.outputs.REMOTE_HASH }} -m "Release tag"
          git push origin ${{ steps.get-remote-hash.outputs.REMOTE_HASH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save current hash to cache
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: ''
        #if: ${{ !env.SKIP_BUILD }}  # 新增：仅当未跳过时执行

      - name: Clone project
        run: git clone --depth=1 ${{ steps.get-project.outputs.project }} project
        #if: ${{ !env.SKIP_BUILD }}  # 新增：仅当未跳过时执行

      - name: Setup Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
        #if: ${{ !env.SKIP_BUILD }}  # 新增：仅当未跳过时执行

      - name: Build the app
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace
        #if: ${{ !env.SKIP_BUILD }}  # 新增：仅当未跳过时执行

      - name: Get APK file paths
        run: |
          apks=($(find project -type f -name "*.apk" | head -n 2))
          echo "APK1_PATH=${apks[0]}" >> $GITHUB_ENV
          echo "APK2_PATH=${apks[1]}" >> $GITHUB_ENV
          echo "APK1_NAME=${apks[0]##*/}" >> $GITHUB_ENV
          echo "APK2_NAME=${apks[1]##*/}" >> $GITHUB_ENV

        # 替换废弃的GitHub Release动作
        # 新增peter-evans/create-release@v3实现相同功能
      - name: Create GitHub Release
        #if: ${{ !env.SKIP_BUILD }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-remote-hash.outputs.REMOTE_HASH }}
          name: ${{ format('Build {0}', steps.get-remote-hash.outputs.REMOTE_HASH) }}
          body: |
            ${{ format('自动构建发布 - 提交哈希: {0}', steps.get-remote-hash.outputs.REMOTE_HASH) }}
            
            提取自远程仓库的最新提交信息:
            $(git log -1 --pretty=%B ${{ steps.get-remote-hash.outputs.REMOTE_HASH }})
          files: |
            ${{ env.APK1_PATH }}
            ${{ env.APK2_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare upload paths
        run: |
          paths=()
          if [ -n "$APK1_PATH" ]; then
            paths+=("$APK1_PATH")
          fi
          if [ -n "$APK2_PATH" ]; then
            paths+=("$APK2_PATH")
          fi
          echo "UPLOAD_PATHS=$(printf "%s\n" "${paths[@]}")" >> $GITHUB_ENV

      - name: Upload APKs
        if: ${{ env.UPLOAD_PATHS != null && env.UPLOAD_PATHS != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.UPLOAD_PATHS }}
          name: ${{ format('Build_{0}', steps.get-remote-hash.outputs.REMOTE_HASH) }}
