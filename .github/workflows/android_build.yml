name: android_build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0/6 * * *'  # 每6小时自动触发一次

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Get project name
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT
      - name: Clone project
        run: git clone ${{ steps.get-project.outputs.project }} project
        # 修改 fetch-depth 以支持提交历史比对

      - name: Fetch remote HEAD
        working-directory: ./project
        run: git fetch origin main

      - name: Check for new commits
        working-directory: ./project
        id: check_new_commits
        run: |
          LOCAL_HEAD=$(git rev-parse HEAD)
          REMOTE_HEAD=$(git rev-parse origin/main)
          if [ "$LOCAL_HEAD" = "$REMOTE_HEAD" ]; then
            echo "No new commits found. Skipping build."
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          else
            echo "New commits detected. Proceeding with build."
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Build the app
        if: env.SKIP_BUILD == 'false'
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace
      - name: Get APK file paths
        run: |
          apks=($(find project -type f -name "*.apk" | head -n 2))
          echo "APK1_PATH=${apks[0]}" >> $GITHUB_ENV
          echo "APK2_PATH=${apks[1]}" >> $GITHUB_ENV
          # 新增原始文件名环境变量
          echo "APK1_NAME=${apks[0]##*/}" >> $GITHUB_ENV
          echo "APK2_NAME=${apks[1]##*/}" >> $GITHUB_ENV

      - name: Upload First APK
        if: ${{ env.APK1_PATH != null && env.APK1_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK1_PATH }}
          # 使用原始文件名作为上传名称
          name: ${{ env.APK1_NAME }}

      - name: Upload Second APK
        if: ${{ env.APK2_PATH != null && env.APK2_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK2_PATH }}
          # 使用原始文件名作为上传名称
          name: ${{ env.APK2_NAME }}
