name: build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Get project name
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT
      - name: Clone project
        run: git clone --depth=1 ${{ steps.get-project.outputs.project }} project
      - name: Setup Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build the app
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace
      - name: Get APK file paths
        run: |
          # 查找构建输出的APK文件（通常在app/build/outputs/apk/目录下）
          apks=($(find project -type f -name "*.apk" | head -n 2))
          # 直接导出原始构建路径
          echo "APK1_PATH=${apks[0]}" >> $GITHUB_ENV
          echo "APK2_PATH=${apks[1]}" >> $GITHUB_ENV
          # 输出原始文件名调试信息
          echo "APK1 Original Name: ${apks[0]##*/}"
          echo "APK2 Original Name: ${apks[1]##*/}"

      - name: Upload First APK
        if: ${{ env.APK1_PATH != null && env.APK1_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK1_PATH }}
          name: "${apks[0]##*/}"

      - name: Upload Second APK
        if: ${{ env.APK2_PATH != null && env.APK2_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK2_PATH }}
          name: "${apks[1]##*/}"
