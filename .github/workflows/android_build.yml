name: android_build
on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PROJECT_REPO: https://github.com/Fansirsqi/Sesame-TK
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Create project-to-build file
        run: |
          echo "$PROJECT_REPO" > project-to-build
      - name: Get project name
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT
      - name: Restore previous hash from cache
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: |
            ${{ steps.get-project.outputs.project }}-hash
        continue-on-error: true
      - name: Get remote HEAD hash
        id: get-remote-hash
        run: |
          REMOTE_HASH=$(git ls-remote ${{ steps.get-project.outputs.project }} HEAD | awk '{print $1}')
          PREVIOUS_HASH=""
          if [ -f previous_hash.txt ]; then
            PREVIOUS_HASH=$(cat previous_hash.txt)
          fi
          if [ "$REMOTE_HASH" = "$PREVIOUS_HASH" ]; then
            echo "No new commits since last check. Skipping workflow."
            echo "SKIP_BUILD=1" >> $GITHUB_ENV
          else
            echo "New commit detected. Proceeding with build."
            echo "$REMOTE_HASH" > previous_hash.txt
          fi
      - name: Save current hash to cache
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: ''
        if: ${{ !env.SKIP_BUILD }}
      - name: Clone project
        run: git clone --depth=1 ${{ steps.get-project.outputs.project }} project
        if: ${{ !env.SKIP_BUILD }}
      - name: Setup Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
        if: ${{ !env.SKIP_BUILD }}
      - name: Build the app
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace
        if: ${{ !env.SKIP_BUILD }}
      - name: Get APK file paths
        run: |
          apks=($(find project -type f -name "*.apk" | head -n 2))
          echo "APK1_PATH=${apks[0]}" >> $GITHUB_ENV
          echo "APK2_PATH=${apks[1]}" >> $GITHUB_ENV
          echo "APK1_NAME=${apks[0]##*/}" >> $GITHUB_ENV
          echo "APK2_NAME=${apks[1]##*/}" >> $GITHUB_ENV
      - name: Upload First APK
        if: ${{ env.APK1_PATH != null && env.APK1_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK1_PATH }}
          name: ${{ env.APK1_NAME }}
      - name: Upload Second APK
        if: ${{ env.APK2_PATH != null && env.APK2_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK2_PATH }}
          name: ${{ env.APK2_NAME }}
      - name: Get remote repository info
        if: ${{ !env.SKIP_BUILD }}
        working-directory: ./project
        run: |
          PROJECT_PATH=$(echo "$PROJECT_REPO" | sed 's/.*github.com\/\(.*\)/\1/')
          API_URL="https://api.github.com/repos/$PROJECT_PATH"
          sudo apt-get update
          sudo apt-get install -y jq
          REPO_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          LATEST_TAG=$(echo "$REPO_INFO" | jq -r '.default_branch')
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "RELEASE_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "RELEASE_NAME=Build for $LATEST_TAG" >> $GITHUB_ENV
          echo "RELEASE_BODY=$COMMIT_MSG\n\n$DESCRIPTION" >> $GITHUB_ENV
      - name: Create Release
        if: ${{ !env.SKIP_BUILD }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
