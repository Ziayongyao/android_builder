name: android_build

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时执行一次
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:  # 新增权限配置（关键修改）
      contents: write  # 创建release需要写入权限
    env:
      # 新增全局环境变量定义
      PROJECT_REPO: https://github.com/Fansirsqi/Sesame-TK  # 项目仓库地址变量

    steps:
      - name: 设置JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: 创建项目构建文件
        run: |
          # 使用环境变量写入文件
          echo "$PROJECT_REPO" > project-to-build

      - name: 获取项目名称
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT

      - name: 从缓存恢复先前哈希
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: |
            ${{ steps.get-project.outputs.project }}-hash
        continue-on-error: true  # 新增：允许缓存未命中时继续执行

      - name: 获取远程HEAD哈希
        id: get-remote-hash
        run: |
          REMOTE_HASH=$(git ls-remote ${{ steps.get-project.outputs.project }} HEAD | awk '{print $1}')
          PREVIOUS_HASH=""
          if [ -f previous_hash.txt ]; then
            PREVIOUS_HASH=$(cat previous_hash.txt)
          fi
          # 新增：输出哈希值用于调试
          echo "REMOTE_HASH=$REMOTE_HASH"
          echo "PREVIOUS_HASH=$PREVIOUS_HASH"


          if [ "$REMOTE_HASH" = "$PREVIOUS_HASH" ]; then
            echo "No new commits since last check. Skipping workflow."
            echo "SKIP_BUILD=1" >> $GITHUB_ENV
            exit 0  # 新增：直接终止当前步骤
          else
            echo "New commit detected. Proceeding with build."
            echo "$REMOTE_HASH" > previous_hash.txt
          fi

      - name: 保存当前哈希到缓存
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: ''
        if: ${{ !env.SKIP_BUILD }}  # 新增：仅当未跳过时执行

      - name: 克隆项目
        run: git clone --depth=1 ${{ steps.get-project.outputs.project }} project
        if: ${{ !env.SKIP_BUILD }}
      
      - name: 获取远程仓库信息
        if: ${{ !env.SKIP_BUILD }}
        working-directory: ./project
        run: |
          PROJECT_PATH=$(echo "$PROJECT_REPO" | sed 's/.*github.com\/\(.*\)/\1/')
          API_URL="https://api.github.com/repos/$PROJECT_PATH"
          
          sudo apt-get update
          sudo apt-get install -y jq

          REPO_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          
          LATEST_TAG=$(echo "$REPO_INFO" | jq -r '.default_branch')
          COMMIT_MSG=$(git log -1 --pretty=%B)
          DESCRIPTION=$(echo "$REPO_INFO" | jq -r '.description')

          echo "RELEASE_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "RELEASE_NAME=Build for $LATEST_TAG" >> $GITHUB_ENV
          echo "RELEASE_BODY=$COMMIT_MSG\n\n$DESCRIPTION" >> $GITHUB_ENV

      - name: 配置Gradle缓存
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
        if: ${{ !env.SKIP_BUILD }}
      
      - name: 构建应用
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace
        if: ${{ !env.SKIP_BUILD }}  # 新增：仅当未跳过时执行

      - name: 获取APK文件路径
        run: |
          APK_SEARCH_PATH="$(pwd)/project"
          # 查找所有APK文件并按修改时间排序
          apks=($(find $APK_SEARCH_PATH -type f -name "*.apk" -exec stat -c "%Y %n" {} \; | sort -nr | head -n 2 | awk '{print $2}'))
          
          if [ ${#apks[@]} -eq 0 ]; then
            echo "ERROR: 未找到任何APK文件"
            exit 1
          fi
          
          # 创建缓存目录并复制APK文件
          mkdir -p "$(pwd)/apks_cache"
          for apk in "${apks[@]}"; do
            cp -f "$apk" "$(pwd)/apks_cache/"
            echo "DEBUG: 已复制APK文件: $apk"
          done
          
          # 列出缓存目录内容进行调试
          echo "DEBUG: 缓存目录内容:"
          ls -la "$(pwd)/apks_cache/"
          
          # 设置环境变量，使用find命令安全获取APK文件路径
          # 移除引号以允许通配符扩展，并添加错误处理
          shopt -s nullglob  # 启用nullglob，当通配符无匹配时返回空列表
          APK_FILES=($(pwd)/apks_cache/*.apk)
          shopt -u nullglob  # 禁用nullglob
          
          if [ ${#APK_FILES[@]} -eq 0 ]; then
            echo "ERROR: 缓存目录中未找到APK文件"
            exit 1
          fi
          
          echo "APK1_PATH=${APK_FILES[0]}" >> $GITHUB_ENV
          if [ ${#APK_FILES[@]} -ge 2 ]; then
            echo "APK2_PATH=${APK_FILES[1]}" >> $GITHUB_ENV
          else
            echo "APK2_PATH=" >> $GITHUB_ENV
          fi

          echo "DEBUG: 已设置APK路径:"
          echo "APK1_PATH=${APK_FILES[0]}"
          if [ ${#APK_FILES[@]} -ge 2 ]; then
            echo "APK2_PATH=${APK_FILES[1]}"
          fi

      - name: 创建发布版本
        if: ${{ !env.SKIP_BUILD }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files:
            ${{ env.APK1_PATH }}
            ${{ env.APK2_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}
