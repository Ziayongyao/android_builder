name: android_build

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时执行一次
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PROJECT_REPO: https://github.com/Fansirsqi/Sesame-TK

    steps:
      - name: 设置JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: 创建项目构建文件
        run: |
          echo "$PROJECT_REPO" > project-to-build

      - name: 获取项目名称
        id: get-project
        run: |
          # 提取仓库短名称作为缓存key（修正sed分隔符问题）
          PROJECT=$(cat project-to-build | sed 's@.*github.com.@@;s@.git$@@')
          echo "project=$PROJECT" >> $GITHUB_OUTPUT

      - name: 从缓存恢复先前哈希
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: |
            ${{ steps.get-project.outputs.project }}-hash
        continue-on-error: true

      - name: 获取远程HEAD哈希
        id: get-remote-hash
        run: |
          REMOTE_HASH=$(git ls-remote ${{ env.PROJECT_REPO }}.git HEAD | awk '{print $1}')
          PREVIOUS_HASH=""
          if [ -f previous_hash.txt ]; then
            PREVIOUS_HASH=$(cat previous_hash.txt)
          fi

          if [ "$REMOTE_HASH" = "$PREVIOUS_HASH" ]; then
            echo "No new commits since last check. Skipping workflow."
            echo "SKIP_BUILD=1" >> $GITHUB_ENV
            exit 0
          else
            echo "New commit detected. Proceeding with build."
            echo "$REMOTE_HASH" > previous_hash.txt
          fi

      - name: 保存当前哈希到缓存
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: ''
        if: ${{ !env.SKIP_BUILD }}

      - name: 克隆项目
        run: git clone --depth=1 ${{ env.PROJECT_REPO }}.git project
        if: ${{ !env.SKIP_BUILD }}
      
      - name: 获取远程仓库信息
        if: ${{ !env.SKIP_BUILD }}
        working-directory: ./project
        run: |
          # 修正正则表达式，正确提取仓库路径
          PROJECT_PATH=$(echo "$PROJECT_REPO" | sed 's/.*github.com\/$$.*/\1/')
          TAGS_URL="https://api.github.com/repos/$PROJECT_PATH/tags"

          sudo apt-get update
          sudo apt-get install -y jq

          # 获取最新的标签
          TAG_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$TAGS_URL")
          LATEST_TAG=$(echo "$TAG_INFO" | jq -r '.[0].name')

          COMMIT_MSG=$(git log -1 --pretty=%B)
          DESCRIPTION=$(git log -1 --pretty=%B)

          echo "RELEASE_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "RELEASE_NAME=Build for $LATEST_TAG" >> $GITHUB_ENV
          echo "RELEASE_BODY=$COMMIT_MSG\n\n$DESCRIPTION" >> $GITHUB_ENV

      - name: 配置Gradle缓存
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
        if: ${{ !env.SKIP_BUILD }}
      
      - name: 构建应用
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug
        if: ${{ !env.SKIP_BUILD }}

      - name: 获取APK文件路径
        run: |
          APK_SEARCH_PATH="$(pwd)/project"
          apks=($(find $APK_SEARCH_PATH -type f -name "*.apk" -exec stat -c "%Y %n" {} \; | sort -nr | head -n 2 | awk '{print $2}'))
          
          if [ ${#apks[@]} -eq 0 ]; then
            echo "ERROR: 未找到任何APK文件"
            exit 1
          fi
          
          mkdir -p "$(pwd)/apks_cache"
          for apk in "${apks[@]}"; do
            cp -f "$apk" "$(pwd)/apks_cache/"
          done
          
          shopt -s nullglob
          APK_FILES=($(pwd)/apks_cache/*.apk)
          shopt -u nullglob
          
          if [ ${#APK_FILES[@]} -eq 0 ]; then
            echo "ERROR: 缓存目录中未找到APK文件"
            exit 1
          fi
          
          echo "APK1_PATH=${APK_FILES[0]}" >> $GITHUB_ENV
          if [ ${#APK_FILES[@]} -ge 2 ]; then
            echo "APK2_PATH=${APK_FILES[1]}" >> $GITHUB_ENV
          else
            echo "APK2_PATH=" >> $GITHUB_ENV
          fi

      - name: 创建发布版本
        if: ${{ !env.SKIP_BUILD }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files: |
            ${{ env.APK1_PATH }}
            ${{ env.APK2_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}
