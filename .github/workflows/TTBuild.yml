name: Time-Triggered Build

on:
  schedule:
    - cron: '0 0 * * *'  # 每天0点执行
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PROJECT_REPO: https://github.com/Fansirsqi/Sesame-TK

    steps:
      - name: 设置JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: 创建项目构建文件
        run: |
          echo "$PROJECT_REPO" > project-to-build

      - name: 获取项目名称
        id: get-project
        run: |
          # 提取仓库短名称作为缓存key（修正sed分隔符问题）
          PROJECT=$(cat project-to-build | sed 's@.*github.com.@@;s@.git$@@')
          echo "project=$PROJECT" >> $GITHUB_OUTPUT

      - name: 从缓存恢复先前哈希
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: |
            ${{ steps.get-project.outputs.project }}-hash
        continue-on-error: true

      - name: 获取远程HEAD哈希
        id: get-remote-hash
        run: |
          REMOTE_HASH=$(git ls-remote ${{ env.PROJECT_REPO }}.git HEAD | awk '{print $1}')
          PREVIOUS_HASH=""
          if [ -f previous_hash.txt ]; then
            PREVIOUS_HASH=$(cat previous_hash.txt)
          fi

          if [ "$REMOTE_HASH" = "$PREVIOUS_HASH" ]; then
            echo "No new commits since last check. Skipping workflow."
            echo "SKIP_BUILD=1" >> $GITHUB_ENV
            exit 0
          else
            echo "New commit detected. Proceeding with build."
            echo "$REMOTE_HASH" > previous_hash.txt
          fi

      - name: 保存当前哈希到缓存
        uses: actions/cache@v3
        with:
          path: previous_hash.txt
          key: ${{ steps.get-project.outputs.project }}-hash
          restore-keys: ''
        if: ${{ !env.SKIP_BUILD }}

      - name: 克隆项目
        run: git clone --depth=1 ${{ env.PROJECT_REPO }}.git project
        if: ${{ !env.SKIP_BUILD }}
      
      - name: 配置Gradle缓存
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
        if: ${{ !env.SKIP_BUILD }}
      
      - name: 构建应用
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug
        if: ${{ !env.SKIP_BUILD }}

      - name: 获取APK文件路径
        run: |
          APK_SEARCH_PATH="$(pwd)/project"
          apks=($(find $APK_SEARCH_PATH -type f -name "*.apk" -exec stat -c "%Y %n" {} \; | sort -nr | head -n 2 | awk '{print $2}'))
          
          if [ ${#apks[@]} -eq 0 ]; then
            echo "ERROR: 未找到任何APK文件"
            exit 1
          fi
          
          mkdir -p "$(pwd)/apks_cache"
          for apk in "${apks[@]}"; do
            cp -f "$apk" "$(pwd)/apks_cache/"
          done
          
          shopt -s nullglob
          APK_FILES=($(pwd)/apks_cache/*.apk)
          shopt -u nullglob
          
          if [ ${#APK_FILES[@]} -eq 0 ]; then
            echo "ERROR: 缓存目录中未找到APK文件"
            exit 1
          fi
          
          echo "APK1_PATH=${APK_FILES[0]}" >> $GITHUB_ENV
          if [ ${#APK_FILES[@]} -ge 2 ]; then
            echo "APK2_PATH=${APK_FILES[1]}" >> $GITHUB_ENV
          else
            echo "APK2_PATH=" >> $GITHUB_ENV
          fi
        if: ${{ !env.SKIP_BUILD }}

      # 从APK提取版本标签
      - name: 从APK提取版本标签
        run: |
          # 安装aapt工具
          sudo apt-get -qq update
          sudo apt-get -qq install -y aapt
          
          # 使用sed完整提取versionName单引号内的全部内容
          VERSION_NAME=$(aapt dump badging "${{ env.APK1_PATH }}" | grep "versionName" | sed -n "s/.*versionName='\([^']*\)'.*/\1/p")
          echo "RELEASE_TAG=$VERSION_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=v$VERSION_NAME" >> $GITHUB_ENV
        if: ${{ !env.SKIP_BUILD }}

      # 从远程仓库获取最新提交信息
      - name: 获取最新提交信息
        run: |
          # 获取最新提交的主题和描述
          PROJECT_API_URL=$(echo "${{ env.PROJECT_REPO }}" | sed 's@.*github.com.@@;s@.git$@@;s@^@https://api.github.com/repos/@')
          COMMIT_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "$PROJECT_API_URL/commits?per_page=1" | jq -r '.[0]')
          
          COMMIT_SUBJECT=$(echo $COMMIT_DATA | jq -r '.commit.message | split("\n")[0]')
          COMMIT_BODY=$(echo $COMMIT_DATA | jq -r '.commit.message | sub(".*?\n"; "")')
          COMMIT_AUTHOR=$(echo $COMMIT_DATA | jq -r '.commit.author.name')
          COMMIT_DATE=$(echo $COMMIT_DATA | jq -r '.commit.author.date')
          COMMIT_URL=$(echo $COMMIT_DATA | jq -r '.html_url')
          
          # 修复：使用正确的heredoc语法设置多行环境变量
          cat <<EOF >> $GITHUB_ENV
          RELEASE_BODY<<EOF
          ### 🚀 最新提交: [$COMMIT_SUBJECT]($COMMIT_URL)
          
          **作者**: $COMMIT_AUTHOR  
          **时间**: $COMMIT_DATE  
          
          **提交内容**:  
          $COMMIT_BODY
          
          ---
          
          🔧 **自动化构建信息**  
          - 版本: ${{ env.RELEASE_TAG }}
          - 构建时间: $(date '+%Y-%m-%d %H:%M:%S %Z')
          EOF
        if: ${{ !env.SKIP_BUILD }}

      - name: 创建发布版本
        if: ${{ !env.SKIP_BUILD }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files: |
            ${{ env.APK1_PATH }}
            ${{ env.APK2_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}
