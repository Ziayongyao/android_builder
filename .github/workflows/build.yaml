name: android_build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3  # 更新到最新版本
        with:
          fetch-depth: 1  # 简化克隆深度设置
      
      - name: Set up JDK
        uses: actions/setup-java@v3  # 更新到最新版本
        with:
          distribution: 'temurin'  # 明确指定JDK发行版
          java-version: 17  # 升级到最新稳定版JDK17
      
      - name: Get project name
        id: get-project
        run: |
          PROJECT=$(cat project-to-build)
          echo "project=$PROJECT" >> $GITHUB_OUTPUT  # 使用新式输出方式
      
      - name: Clone project
        run: git clone --depth=1 ${{ steps.get-project.outputs.project }} project
      
      - name: Setup Gradle cache
        uses: actions/cache@v3  # 新增缓存步骤
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      
      - name: Build the app
        working-directory: ./project
        run: |
          ./gradlew --no-daemon assembleDebug --stacktrace --parallel  # 添加优化参数
        
      - name: Verify APK Signing
        working-directory: ./project
        run: |
          # 增加目录内容检查（修正路径）
          echo "Listing build output directory:"
          ls -la project/app/build/outputs/apk/debug/
          
          # 验证APK是否包含默认debug签名（使用精确匹配）
          unzip -l project/app/build/outputs/apk/debug/app-debug.apk | grep -i 'META-INF'
          
          # 检查debug.keystore是否存在
          ls -la ~/.android/debug.keystore
      
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: my-build-apk
          # 修正APK文件路径并保持精确匹配
          path: project/app/build/outputs/apk/debug/app-debug.apk
